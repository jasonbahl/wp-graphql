{"version":3,"sources":["components/Explorer/ErrorBoundary.js","components/Explorer/index.js","components/IDE/index.js","components/Exporter/index.js","App.js","index.js"],"names":["ErrorBoundary","withErrorBoundary","children","useErrorBoundary","error","console","log","message","resetError","onClick","QueryForm","operationTypes","length","id","map","type","key","alert","block","style","marginBottom","memoizedParsedQuery","parseQuery","query","trim","parse","noLocation","e","Error","getFieldsAsTree","treeFields","GraphQLObjectType","fieldMap","getFields","fields","Object","keys","name","field","i","fieldType","isWrappingType","ofType","fieldData","title","isLeaf","GraphQLScalarType","push","QueryBuilderFieldSelect","schema","operation","useState","treeData","setTreeData","useEffect","DirectoryTree","multiple","checkable","showIcon","loadData","onLoadData","Promise","resolve","origin","updateTreeData","getType","QueryBuilder","queryDefinition","parsedQuery","getSubscriptionType","getMutationType","getQueryType","ExplorerWrapper","useQueryParam","withDefault","BooleanParam","isOpen","setIsOpen","width","className","height","minWidth","zIndex","display","flexDirection","overflow","Explorer","setOperationTypes","contentsOffset","setContentsOffset","buttonWrapper","document","getElementById","bounds","getBoundingClientRect","bottom","parsed","memoizeAndParseQuery","GraphQLSchema","schemaOperationTypes","padding","top","definitions","nonce","window","wpGraphiQLSettings","endpoint","graphqlEndpoint","location","headers","Accept","fetcher","graphQLParams","fetch","method","body","JSON","stringify","then","response","json","IDE","graphiql","useRef","StringParam","setQueryInUrl","ideQuery","currentQuery","setCurrentQuery","isExplorerOpen","setExplorerOpen","isExporterOpen","setExporterOpen","print","flex","ref","c","current","onEditQuery","editedQuery","compress","Toolbar","Button","handlePrettifyQuery","label","handleToggleHistory","Exporter","AppWithRouter","useQueryParams","variables","ObjectParam","setQuery","setSchema","getIntrospectionQuery","result","fetchedSchema","buildClientSchema","data","onEdit","onRunOperation","App","ReactRouterRoute","Route","container","ReactDOM","render"],"mappings":"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","file":"static/js/main.dcbe1cfe.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { withErrorBoundary, useErrorBoundary } from 'react-use-error-boundary'\n\nconst ErrorBoundary = withErrorBoundary(({ children }) => {\n    const [error, resetError] = useErrorBoundary((error) => {\n        console.log(error.message)\n    })\n\n    if (error) {\n        return (\n            <div>\n                <p>{error.message}</p>\n                <button onClick={resetError}>Try again</button>\n            </div>\n        )\n    }\n\n    return <div>{children}</div>\n})\n\nexport default ErrorBoundary\n","import React, { useState, useEffect } from 'react'\nimport { Button, Input, Select } from 'antd'\nimport {\n    GraphQLObjectType,\n    GraphQLScalarType,\n    GraphQLSchema,\n    isWrappingType,\n    parse,\n} from 'graphql'\nimport { Tree } from 'antd'\nimport {\n    BooleanParam,\n    StringParam,\n    useQueryParam,\n    withDefault,\n} from 'use-query-params'\nimport { getParsedQuery } from '../../utils/utils'\nimport ErrorBoundary from './ErrorBoundary'\n\nconst QueryForm = ({ operationTypes }) => {\n    if (!operationTypes.length) {\n        return null\n    }\n\n    return (\n        <div id=\"docs-explorer-buttons\">\n            {operationTypes.map((type) => (\n                <Button\n                    key={`Add${type}Button`}\n                    onClick={() => {\n                        alert(`Add ${type}`)\n                    }}\n                    block\n                    style={{ marginBottom: '12px' }}\n                >{`Add ${type}`}</Button>\n            ))}\n        </div>\n    )\n}\n\nconst renderTreeNodes = (treeData) => {\n    if (!treeData || !treeData.length) {\n        return null\n    }\n\n    return treeData.map((node) => {\n        let title = node.title\n        switch (node.type) {\n            case 'enum':\n                title = (\n                    <Select\n                        defaultValue=\"lucy\"\n                        style={{ width: 120 }}\n                        onChange={() => {\n                            console.log('change nested select! ')\n                        }}\n                    >\n                        <Select.Option value=\"jack\">Jack</Select.Option>\n                        <Select.Option value=\"lucy\">Lucy</Select.Option>\n                        <Select.Option value=\"disabled\" disabled>\n                            Disabled\n                        </Select.Option>\n                        <Select.Option value=\"Yiminghe\">yiminghe</Select.Option>\n                    </Select>\n                )\n                break\n            case 'string':\n                title = <Input value={node.title} />\n                break\n            default:\n                break\n        }\n\n        return (\n            <Tree.TreeNode title={title} key={node.key} dataRef={node}>\n                {node.treeData ? renderTreeNodes(node.treeData) : null}\n            </Tree.TreeNode>\n        )\n    })\n}\n\nlet memoizedParsedQuery = []\nexport const memoizeAndParseQuery = (query) => {\n\n    if ( ! query || '' === query ) {\n        memoizedParsedQuery[1] = '';\n        return null;\n    }\n\n    if (memoizedParsedQuery.length && memoizedParsedQuery[0] === query) {\n        return memoizedParsedQuery[1]\n    }\n\n    let parsed = parseQuery(query)\n\n    if (parsed instanceof Error) {\n        if (memoizedParsedQuery) {\n            return memoizedParsedQuery[1]\n        }\n        return ''\n    }\n\n    memoizedParsedQuery = [query, parsed]\n    return parsed\n}\n\nconst parseQuery = (query) => {\n    try {\n        if (!query.trim()) {\n            return null\n        }\n        return parse(query, { noLocation: true })\n    } catch (e) {\n        return new Error(e)\n    }\n}\n\nconst getFieldsAsTree = ( type ) => {\n\n    let treeFields = []\n\n    if ( ! type instanceof GraphQLObjectType ) {\n        return treeFields;\n    }\n\n    if ( ! 'getFields' in type ) {\n        return treeFields;\n    }\n\n    const fieldMap = type.getFields()\n    const fields = Object.keys(fieldMap).map((name) => fieldMap[name])\n\n    console.log( { type, fields } );\n\n    if ( ! fields.length ) {\n        return treeFields;\n    }\n\n    fields.map((field, i) => {\n\n        console.log( field )\n\n        let fieldType = 'String';\n\n        if ( field && field.type ) {\n            if ( isWrappingType( field.type ) ) {\n                fieldType = field.type.ofType;\n            } else {\n                fieldType = field.type;\n            }\n        }\n\n        const fieldData = {\n            title: field.name,\n            key: type.name + '.' + field.name,\n            isLeaf: fieldType instanceof GraphQLScalarType,\n            fieldType: fieldType?.name ?? 'String',\n        }\n        treeFields.push(fieldData)\n    })\n\n    return treeFields;\n\n}\n\nconst updateTreeData = ( fields, key, schema ) => {\n    return fields.map(( field ) => {\n        if ( field.key === key ) {\n            console.log(field)\n            const fieldType = schema.getType( field.fieldType )\n            const children = getFieldsAsTree( fieldType );\n            if ( ! children.length ) {\n                return field;\n            }\n            return { ...field, children }\n        }\n        if ( field.children ) {\n            return { ...field, children: updateTreeData(field.children, key, schema)}\n        }\n        return field;\n    })\n}\n\nconst QueryBuilderFieldSelect = ({ type, operation, schema }) => {\n    const [treeData, setTreeData] = useState(null)\n\n    useEffect(() => {\n\n        const treeFields = getFieldsAsTree( type )\n\n        if (treeFields && treeFields.length) {\n            if (null === treeData) {\n                setTreeData(treeFields)\n            }\n        }\n    })\n\n    const onLoadData = ({ key, children }) => {\n\n        console.log( { onLoadData: { key, children }})\n\n        return new Promise((resolve) => {\n            if (children) {\n                console.log({ loadData: { key, children } })\n                resolve()\n            }\n\n            setTreeData((origin) => {\n                return updateTreeData(origin, key, schema)\n            })\n            resolve()\n        })\n    }\n\n    if (type instanceof GraphQLScalarType) {\n        return <div>Scalar: {type.name}</div>\n    }\n\n    if (!type || !'getFields' in type) {\n        return null\n    }\n\n    return (\n        <Tree.DirectoryTree\n            multiple\n            checkable\n            showIcon={false}\n            treeData={treeData}\n            loadData={onLoadData}\n            setTreeData={setTreeData}\n        />\n    )\n}\n\n/**\n * The Checkbox interface for building the query\n *\n * @param schema\n * @param query\n * @param parsedQuery\n * @param queryDefinition\n * @returns {null}\n * @constructor\n */\nconst QueryBuilder = ({ schema, query, parsedQuery, queryDefinition }) => {\n    if (!queryDefinition.operation) {\n        return null\n    }\n\n    let type\n\n    switch (queryDefinition.operation) {\n        case 'subscription':\n            type = schema.getSubscriptionType()\n            break\n        case 'mutation':\n            type = schema.getMutationType()\n            break\n        case 'query':\n        default:\n            type = schema.getQueryType()\n            break\n    }\n\n    if ( ! type ) {\n        return null\n    }\n\n    return (\n        <div>\n            <h3>{queryDefinition.operation}</h3>\n            <QueryBuilderFieldSelect type={type} schema={schema} />\n        </div>\n    )\n}\n\nconst ExplorerWrapper = ({ schema, children }) => {\n    const [isOpen, setIsOpen] = useQueryParam(\n        'isExplorerOpen',\n        withDefault(BooleanParam, true)\n    )\n    const [width, setWidth] = useState('300px')\n    const [title, setTitle] = useState('Explorer')\n\n    return (\n        <div\n            className=\"docExplorerWrap\"\n            style={{\n                height: '100%',\n                width: width,\n                minWidth: width,\n                zIndex: 7,\n                display: false === isOpen ? 'none' : 'flex',\n                flexDirection: 'column',\n                overflow: 'hidden',\n            }}\n        >\n            <div className=\"doc-explorer-title-bar\">\n                <div className=\"doc-explorer-title\">{title}</div>\n                <div className=\"doc-explorer-rhs\">\n                    <div\n                        className=\"docExplorerHide\"\n                        onClick={() => {\n                            setIsOpen(!isOpen)\n                        }}\n                    >\n                        {'\\u2715'}\n                    </div>\n                </div>\n            </div>\n            { ! schema ? <div className=\"error-container\">Loading Schema...</div> : children}\n        </div>\n    )\n}\n\nconst Explorer = ({ schema, query }) => {\n    const [operationTypes, setOperationTypes] = useState([])\n    const [contentsOffset, setContentsOffset] = useState('100px')\n\n    useEffect(() => {\n        const buttonWrapper = document.getElementById('docs-explorer-buttons')\n        if (buttonWrapper) {\n            const bounds = buttonWrapper.getBoundingClientRect()\n            setContentsOffset(`${bounds.bottom}px`)\n        }\n    })\n\n    let parsedQuery = query ? memoizeAndParseQuery(query) : null;\n\n    if (!operationTypes.length && schema instanceof GraphQLSchema) {\n        let schemaOperationTypes = []\n\n        if (schema.getQueryType()) {\n            schemaOperationTypes.push('Query')\n        }\n        if (schema.getMutationType()) {\n            schemaOperationTypes.push('Mutation')\n        }\n        if (schema.getSubscriptionType()) {\n            schemaOperationTypes.push('Subscription')\n        }\n        if (schemaOperationTypes.length) {\n            setOperationTypes(schemaOperationTypes)\n        }\n    }\n\n    return (\n        <ExplorerWrapper schema={schema} >\n            <ErrorBoundary>\n                <div style={{ padding: '10px' }}>\n                    <QueryForm operationTypes={operationTypes} />\n                    <div\n                        className=\"doc-explorer-contents\"\n                        style={{\n                            top: contentsOffset,\n                        }}\n                    >\n                        {parsedQuery &&\n                            parsedQuery.definitions &&\n                            parsedQuery.definitions.length &&\n                            parsedQuery.definitions.map(\n                                (queryDefinition, i) => (\n                                    <QueryBuilder\n                                        key={i}\n                                        schema={schema}\n                                        query={query}\n                                        parsedQuery={parsedQuery}\n                                        queryDefinition={queryDefinition}\n                                    />\n                                )\n                            )}\n                    </div>\n                </div>\n            </ErrorBoundary>\n        </ExplorerWrapper>\n    )\n}\n\nexport default Explorer\n","import React, { useRef, useState, useEffect } from 'react'\nimport GraphiQL from 'graphiql'\nimport { print, parse, validate } from 'graphql'\nimport compress from 'graphql-query-compress'\nimport 'graphiql/graphiql.css'\nimport {\n    BooleanParam,\n    StringParam,\n    useQueryParam,\n    withDefault,\n} from 'use-query-params'\n\nimport './style.css'\n\nlet nonce =\n    window.wpGraphiQLSettings && window.wpGraphiQLSettings.nonce\n        ? window.wpGraphiQLSettings.nonce\n        : null\n\nlet endpoint =\n    window.wpGraphiQLSettings && window.wpGraphiQLSettings.graphqlEndpoint\n        ? window.wpGraphiQLSettings.graphqlEndpoint\n        : window.location.origin\n\nlet headers = {\n    Accept: `application/json`,\n    'Content-Type': `application/json`,\n}\n\nif (nonce) {\n    headers = { ...headers, 'X-WP-Nonce': nonce }\n}\n\nexport function fetcher(graphQLParams) {\n    return fetch(endpoint, {\n        method: `post`,\n        headers,\n        body: JSON.stringify(graphQLParams),\n    }).then(function (response) {\n        return response.json()\n    })\n}\n\nconst IDE = ({ schema }) => {\n    const graphiql = useRef()\n\n    const [query, setQueryInUrl] = useQueryParam('query', StringParam)\n\n    console.log({ ideQuery: query })\n\n    const [currentQuery, setCurrentQuery] = useState(null)\n    const [isExplorerOpen, setExplorerOpen] = useQueryParam(\n        'isExplorerOpen',\n        withDefault(BooleanParam, true)\n    )\n    const [isExporterOpen, setExporterOpen] = useQueryParam(\n        'isExporterOpen',\n        withDefault(BooleanParam, false)\n    )\n\n    useEffect(() => {\n        if (!currentQuery && query && query.length) {\n            try {\n                let parsedQuery = print(parse(query))\n                setCurrentQuery(parsedQuery)\n            } catch (e) {\n                setCurrentQuery(query)\n            }\n        }\n    }, [currentQuery, query])\n\n    return (\n        <div\n            style={{\n                display: `flex`,\n                flex: 1,\n            }}\n        >\n            <GraphiQL\n                ref={(c) => (graphiql.current = c)}\n                fetcher={fetcher}\n                query={currentQuery}\n                schema={schema}\n                onEditQuery={(editedQuery) => {\n                    setCurrentQuery(editedQuery)\n                    if (query !== editedQuery) {\n                        setQueryInUrl(compress(editedQuery))\n                    }\n                }}\n            >\n                <GraphiQL.Toolbar>\n                    <GraphiQL.Button\n                        onClick={() => graphiql.current.handlePrettifyQuery()}\n                        label=\"Prettify\"\n                        title=\"Prettify Query (Shift-Ctrl-P)\"\n                    />\n                    <GraphiQL.Button\n                        onClick={() => graphiql.current.handleToggleHistory()}\n                        label=\"History\"\n                        title=\"Toggle History Panel\"\n                    />\n                    <GraphiQL.Button\n                        onClick={() => {\n                            setExplorerOpen(!isExplorerOpen)\n                        }}\n                        label=\"Explorer\"\n                        title=\"Toggle Explorer Panel\"\n                    />\n                    <GraphiQL.Button\n                        onClick={() => {\n                            setExporterOpen(!isExporterOpen)\n                        }}\n                        label=\"Code Exporter\"\n                        title=\"Toggle Code Exporter Panel\"\n                    />\n                </GraphiQL.Toolbar>\n            </GraphiQL>\n        </div>\n    )\n}\n\nexport default IDE\n","import React from 'react'\nimport 'graphiql-code-exporter/CodeExporter.css'\nimport { BooleanParam, useQueryParam, withDefault } from 'use-query-params'\n\nconst Exporter = () => {\n    const [isOpen, setIsOpen] = useQueryParam(\n        'isExporterOpen',\n        withDefault(BooleanParam, false)\n    )\n    if (!isOpen) {\n        return null\n    }\n\n    return <h2>Exporter</h2>\n}\n\nexport default Exporter\n","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport {\n    QueryParamProvider,\n    useQueryParams,\n    StringParam,\n    ObjectParam,\n    BooleanParam,\n    withDefault,\n    useQueryParam,\n} from 'use-query-params'\nimport Explorer from './components/Explorer'\nimport IDE from './components/IDE'\nimport Exporter from './components/Exporter'\nimport { fetcher } from './components/IDE'\nimport { buildClientSchema, getIntrospectionQuery } from 'graphql'\nimport 'graphiql/graphiql.css'\nimport './app.css'\n\nconst AppWithRouter = () => {\n    const [queryParams, setQueryParams] = useQueryParams({\n        query: withDefault(StringParam, ''),\n        variables: ObjectParam,\n        isExplorerOpen: withDefault(BooleanParam, true),\n        isExporterOpen: withDefault(BooleanParam, false),\n    })\n\n    const [query, setQuery] = useQueryParam('query', StringParam)\n    const [schema, setSchema] = useState(null)\n\n    useEffect(() => {\n        if (!schema) {\n            fetcher({\n                query: getIntrospectionQuery(),\n            }).then((result) => {\n                const fetchedSchema = buildClientSchema(result.data)\n                setSchema(fetchedSchema)\n            })\n        }\n    })\n\n    return (\n        <div className=\"graphiql-container\">\n            <Explorer\n                query={query}\n                schema={schema}\n                onEdit={() => {\n                    console.log('edit explorer')\n                }}\n                onRunOperation={() => {\n                    console.log('run operation')\n                }}\n            />\n            <IDE\n                schema={schema}\n                query={query}\n                setQuery={setQuery}\n                setQueryInUrl={setQuery}\n            />\n            <Exporter />\n        </div>\n    )\n}\n\nconst App = () => (\n    <Router>\n        <QueryParamProvider ReactRouterRoute={Route}>\n            <AppWithRouter />\n        </QueryParamProvider>\n    </Router>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst container = document.getElementById('graphiql')\nReactDOM.render(<App />, container)\n"],"sourceRoot":""}